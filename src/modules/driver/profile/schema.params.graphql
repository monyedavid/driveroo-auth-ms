type du_Location {
    address: String
    landmark: String
    city: String
    country: String
    state: String
    Longitude: String
    Latitude: String
    housenumber: String
    street: String
}

type Co_ordinates {
    Longitude: String
    Latitude: String
}

input up_Driver_Params_Location {
    address: String!
    landmark: String!
    city: String!
    country: String
    state: String!
    housenumber: String!
    street: String!
}

scalar Upload

input up_Driver_Params_bank_ {
    account_number: String
    account_name: String
    name: String
}

type Driver implements User {
    active: Boolean
    confirmed: Boolean
    incompleteProfile: Boolean
    firstName: String
    lastName: String
    mobile: String
    email: String
    avatar: String
    dob: String
    mothers_maiden_name: String
    primary_location: String
    secondary_location: String
    tertiary_location: String
    primary_location_co_ord: Co_ordinates
    secondary_location_co_ord: Co_ordinates
    tertiary_location_co_ord: Co_ordinates
    bvn: String
}

input up_Driver_Params {
    dob: String!
    mothers_maiden_name: String!
    primary_location: String!
    secondary_location: String!
    tertiary_location: String!
    bank_bvn: String!
    bank_: [up_Driver_Params_bank_]
    avatar: String!
    driversLicense: String!
    driverLicenseNumber: String!
}
